// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feeds.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3
)
RETURNING id, created_at, updated_at, last_fetched_at, name, url, user_id
`

type CreateFeedParams struct {
	Name   string
	Url    string
	UserID uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed, arg.Name, arg.Url, arg.UserID)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT feeds.id, feeds.created_at, feeds.updated_at, feeds.last_fetched_at, feeds.name, feeds.url, feeds.user_id
FROM feeds
WHERE id IN (
    SELECT feed_follows.feed_id
    FROM feed_follows
    WHERE feed_follows.user_id=$1
)
ORDER BY feeds.last_fetched_at ASC NULLS FIRST LIMIT 1
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context, userID uuid.UUID) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch, userID)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const listFeedsWithCreators = `-- name: ListFeedsWithCreators :many
SELECT feeds.name, feeds.url, users.name
FROM feeds
INNER JOIN users ON feeds.user_id=users.id
`

type ListFeedsWithCreatorsRow struct {
	Name   string
	Url    string
	Name_2 string
}

func (q *Queries) ListFeedsWithCreators(ctx context.Context) ([]ListFeedsWithCreatorsRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeedsWithCreators)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedsWithCreatorsRow
	for rows.Next() {
		var i ListFeedsWithCreatorsRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Name_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lookupFeedByUrl = `-- name: LookupFeedByUrl :one
SELECT name, id FROM feeds WHERE url=$1
`

type LookupFeedByUrlRow struct {
	Name string
	ID   uuid.UUID
}

func (q *Queries) LookupFeedByUrl(ctx context.Context, url string) (LookupFeedByUrlRow, error) {
	row := q.db.QueryRowContext(ctx, lookupFeedByUrl, url)
	var i LookupFeedByUrlRow
	err := row.Scan(&i.Name, &i.ID)
	return i, err
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
UPDATE feeds SET updated_at=NOW(), last_fetched_at=NOW() WHERE id=$1
`

func (q *Queries) MarkFeedFetched(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, id)
	return err
}
